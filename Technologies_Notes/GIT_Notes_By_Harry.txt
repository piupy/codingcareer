
 >>>>>>>>>>>>  GIT commands  <<<<<<<<<<<<<<



ls : list of directories

pwd : current path

git config --global user.name "username" : to set username

git config --global user.email "email" : to set email

git config --global user.name : to check username

git config --global user.email : to check email

code . : to run visual studio code

git init : to initialize git (for the first time)

ls -lart : to show all the folders and files (including hidden ones)

git status : to check the status of git (whether there is any untracked file or not)

git add "filename" : to add the file in staging area

atleast one "git commit" is required to start the tracking of the project. This is known as initial
commit.

git commit : to commit the changes (to push "staged" file to "unmodified/finally saved" status)

now enter the comments for commit and press esc -> :wq  to exit

touch "filename" : to create the file 

git add -A : to add all the untracked files into staging area (staged mode) in a single shot

git commit -m "your comments here" : to commit without opening vim editor

clear : to clear the terminal

git checkout "filename" : to rollback the changes and bring the file to the last commit present on the
			  git server

git checkout -f : to rollback the changes and bring all the files to the last commit present on the git
                  server

git log : shows all the latest commits

git log -p -5 : shows last 5 commits

press q to exit the git log

git diff : it compares the modified content with the last commit. It is used to show the changed
           content present in "modified red" area which was just changed by someone. It can be added
           to the staged area by "git add "filename"" command.

git diff --staged : it compares the staged area with the last commit.
 
git commit -a -m "comments here" : to directly committing a file without pushing it to the staged area

crtl + c : to cancel a wrongly typed command

git checkout -f : it can be used to remove all the files from staged area as well 

git rm --cached "filename" : to move the files one by one from "staged" area to the "untracked" area.

git rm "filename" : to delete a file from system. However, it can be rollbacked by "git checkout -f".
because, using "rm" mode pushes the file into the staged mode, thats why we can rollback it.

similarly, when a file is created. It is in untracked mode, we need to push it to the staged mode.
Then, it shows that it is a new file. If rollbacked, the file is gone but if committed, the file is 
saved permanently.
 
Hence, staged area is the place where the file reaches when it is created, updated or deleted and we
need to save the changes permanently.

It is moved to the staging area by :

create a file (untracked) -> git add "filename" -> staged

update a file (modified) -> git add "filename" -> staged

delete a file (git rm "filename") -> staged

git status -s : short status

A -> new file

M(green) -> staged file

M(red) -> modified file

M(green)M(red) -> both appears when the file was staged initially but after some time, some changes
                  were done and hence, the file is in modified stage now. Once staged again, the red M
                  disappears meaning the file is staged again.

D -> Deleted File

.gitignore : It is a special type of file which is used to ignore some files. Simply write the names
             of the files to be ignored in this file. However, this file itself is tracked and treated
             as a normal file.
             Eg. Writing "mylogs.log" in .gitignore file will not even track the file and it will 
	     ignore all the instances of the files having this name even if the files are present in 
	     any folder.
	     "/mylogs.log" will ignore the file present in the same path where .gitignore file is
	     present.

writing *.log in gitignore : to ignore all the files with extensions ".log"

foldername/ : to ignore a folder

branch : to create a copy of the project and then we can work on that copy without affecting the 
	 original project.

git branch : to get the list of branches

git branch "branch_name" : to create a branch 

git checkout "branch_name" : to enter a particular branch

git checkout master : to return to the master branch. Changes (even the committed ones) saved will be
		      reverted and the contents of the master branch will be seen again. Contents of
		      the previous branch will be lost temporarily (as they will be available in that
		      branch only)

git merge "branch1" : to merge the contents of the branch into the current branch. It brings all the 
		      changes of that branch

git checkout -b "branch2" : to create a new branch and enter it simultaneously

git remote add "alias for url" "URL" : to link the local repository (present on the system) with the
				       remote repository (which is created on github) so that the code
				       can further be pushed. This alias will represent the URL.

git remote : list of aliases linked with the repositories  

SSH key is required to add a device(PC) which will be used to interact with remote repo

git push -u "alias" "branch_name" : to push the branch. Next time we just need to use "git push"
				    command and the content would be pushed in the branch in which it
				    was pushed last.

git push : to push in the last pushed branch.

git clone "URL" "name with which to be cloned" : to pull the code(present remotely) into our system 
						 If no name is given, the code is cloned with the
						 repo name only.







                  

