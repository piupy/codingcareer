
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Numpy Notes <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Numpy arrays are precompiled and thats why they consume less memory and are faster than python
lists.


To create a numpy array : 

# arr = np.array([1,2,3,4,5])

# arr = np.array([1,2,3,4,5],np.int8)

# arr = np.array([1,2,3,4,5],np.int16)

# arr = np.array([1,2,3,4,5],np.int32)

# arr = np.array([1,2,3,4,5],np.int64)

arr[0][1] or arr[0,1] : to access the values

0 : row
1 : column

arr.shape : order of the array

arr.size : number of elements of the array

arr.dtype : types of values inside it

np.zeros((2,5)) : to create a zero matrix of order 2*5

np.ones((2,5)) : to create a matrix of order 2*5 with all the values as 1

np.arange(10) : to create a numpy range operator

np.linspace(1,10,20) : to get 20 values from 1 to 10 which are equally spaced

np.empty((3,4)) : to get an empty array of size 3*4 with random values which can be replaced 
	afterwards


emp_like = np.empty_like(lin) : to copy and create an array's size and fill that with random values

iden = np.identity(5) / np.eye(5) : to create an identity matrix of order 5*5

rng : a 1-D array with 10 elements

rng = rng.reshape(2,5) : a 2-D array with 10 elements and order 2*5

ar = np.array([
    [1,2,3],
    [4,5,6],
    [7,8,9]
])


axis : 

1 : column
0 : row

ar.sum(axis=0) : sum of column values is obtained

ar.T : to get the transpose of the array 

ar.T.T : returns the original array

ar.transpose() or np.transpose(ar) also works the same way (return transpose)

ar.flat : returns a iterator having the array values as the values

for i in ar.flat:
    print(i)

ar.ndim : returns the dimensions of the array

ar.nbytes : total bytes consumed by the array 

ar.argmax() : returns the index of the maximum value

ar.argmin() : returns the index of the minimum value

ar.argsort() : returns the indexes in the sorted order

ar.argmax(axis=0) : returns the indexes of the maximum value columnwise

ar.argsort() : sorting is done by default on row (axis=1)

ar.ravel() / np.ravel(ar) : to convert the array into a 1-D array

ar7 = np.full((4,4),3) : to create an array of order 4*4 having all the values as 3

np.sqrt(ar) : to get the square roots of the values 

ar.max() : to get the maximum of all the values

ar.min() : to get the minimum of all the values

ar.sum() : to get the sum of all the values

ar1 + ar2 : to get the matrix addition of the two array values.

np.nonzero(ar7) : to get the tuple indexed values where a non-zero value is there in the array

np.count_nonzero(ar7) : to count the non-zero values in the array 


